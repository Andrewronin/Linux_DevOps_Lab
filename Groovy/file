Apavarnitsyn
task 1
def sum(int a, int b) {
    return a+b
}

return this

task 2

def mulEvenOdd(data) {
    def result = []

    data.each {
        def Even = it % 2
        if (Even == 0) {
            result.add(it * 2)
        }
        else {
            result.add(it * 3)
        }
    }
    return result
}

return this

task 3

def boolean isSublist(big, little) {return Collections.indexOfSubList(big, little) != -1}
return this

task 4

def int fib(int n) {n<2 ? n : fib(n-1)+fib(n-2)}
return this

task 5

def boolean isIp(text) {text.matches("(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)")}
return this

task 6

def adults(map) {
    def result = [:]
    map.each { key, value ->
        if (value > 17) {
        result.put(key, value)
       }
    }
    return result
}
return this

task 7

def encryptThis(text) {
    words = text.split()
    result = []
    words.each { word ->
        if (word.size() == 1) {
            new_word = ((int) word).toString()
        } else {
            new_word = word.split('')
            new_word[0] = ((int) new_word[0]).toString()
            temp = new_word[1]
            new_word[1] = new_word[-1]
            new_word[-1] = temp
        }
        result.add(new_word.join(''))
    }

    return result.join(' ')
}
return this

task 8

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

def getSumDig(int n) {
    int sum = 0;
    while (n != 0) {
        sum = sum + (n % 10).toInteger();
        n = (n / 10).toInteger();
    }
    return sum
}
def parseAndFilterJson(text) {

    def result = [:]
    def jsonSlurper = new JsonSlurper()
    def object = jsonSlurper.parseText(text)
        object.each {key, value->
        if (getSumDig(value) == 9)
            result.put(key, value)
        }
    json = JsonOutput.toJson(result)
    return json
}
return this

task 9

def exec (command) {
    def com
    com = command.execute()
    return com.text.trim()
}
return this

task 10

def urlText(text) {text.toURL().text}

return this

task 11

def gstring(text, int index){
    def line
        if (index == 1) {line = "1(${text}) 2() 3()"}
        if (index == 2) (line = "1() 2(${text}) 3()")
        if (index == 3) {line = "1() 2() 3(${text})"}
    return line
    }
return this

calculator

def exec(text) {
    while (text.find(/[0-9]\(/)) {
        def tmp, find
        find=text.find(/[0-9]\(/)
        tmp=find.replace("(","*(")
        text=text.replace(find, tmp)
    }
    while (text.find(/\)\(/)) {
        def tmp, find
        find=text.find(/\)\(/)
        tmp=find.replace("(","*(")
        text=text.replace(find, tmp)
    }

    def result
    result = rawcalc(unbrasket(text)).trim().toInteger()
    return result
}

def unbrasket(expression) {
    //println("unbracket start = $expression")

    def it, find, tmp, check, internal, temp
    while (expression.find(/\((.*?)\)/)) {
        find = expression.find(/\((.*?)\)/)
        check = find.replaceFirst(/\(/, "")
        if (check.find(/\((.*?)\)/)) {
            internal = check.find(/\((.*?)\)/)
            tmp = unbrasket(internal)
            temp = expression.replace(internal, tmp)
            expression = temp
        }
        else {
            it = check.replaceFirst(/\)/, " ")
            expression = expression.replace(find, rawcalc(it).toString()).trim()
        }
    }
    //println("unbracket return = $expression")
    return expression
}

def rawcalc(text) {
    //println("rawcalc start = $text")
    def find
            while (text.find(/(\d+)\s*([*\/])\s*(\d+)/)) {
        find = text.find(/(\d+)\s*([*\/])\s*(\d+)/)
        text = text.replace(find, calculate(find).toString())
    }
    while (text.find(/(\d+)\s*([+-])\s*(\d+)/)) {
        find = text.find(/(\d+)\s*([+-])\s*(\d+)/)
        text = text.replace(find, calculate(find).toString())
    }
    //println("rawcalc start = $text")
    return text
}


def calculate(expression) {
    if (expression.find(/(\d+)\s*([*\/+-])\s*(\d+)/)) {
        def temp, left, right, operator
        temp = expression =~ /(\d+)\s*([*\/+-])\s*(\d+)/
//        println(temp[0][1])
//        println(temp[0][2])
//        println(temp[0][3])
        left=temp[0][1].toInteger()
        operator=temp[0][2]
        right=temp[0][3].toInteger()
//        println("temp = ${temp}")
//        println("left = ${left}")
//        println("oper = ${operator}")
//        println("right = ${right}")

        switch(operator) {
            case '-': return (left - right); break
            case '+': return (left + right); break
            case '*': return (left * right); break
            case '/': return (left.intdiv(right)); break
            }
}
}
//println(exec('23*8'))
//println(exec('3+(2+3(4+3)*(2+3))'))
//println(exec("(8*5+5)*5+(1+(5+9)+9/3)*(1+0)"))
//println(exec("(8*5+5)*5+(1+(5+9)+9/3)*(1+5+5/1)"))
//println(exec("(((1+2)))"))

return this
